{"remainingRequest":"/home/brkkali/works/TestCases/bookstore/book-store/node_modules/babel-loader/lib/index.js!/home/brkkali/works/TestCases/bookstore/book-store/node_modules/vuex-persist/dist/esm/index.js","dependencies":[{"path":"/home/brkkali/works/TestCases/bookstore/book-store/node_modules/vuex-persist/dist/esm/index.js","mtime":499162500000},{"path":"/home/brkkali/works/TestCases/bookstore/book-store/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brkkali/works/TestCases/bookstore/book-store/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL2hvbWUvYnJra2FsaS93b3Jrcy9UZXN0Q2FzZXMvYm9va3N0b3JlL2Jvb2stc3RvcmUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9icmtrYWxpL3dvcmtzL1Rlc3RDYXNlcy9ib29rc3RvcmUvYm9vay1zdG9yZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL2Jya2thbGkvd29ya3MvVGVzdENhc2VzL2Jvb2tzdG9yZS9ib29rLXN0b3JlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBsb2Rhc2hNZXJnZSBmcm9tICdsb2Rhc2gubWVyZ2UnOwovKioNCiAqIENyZWF0ZWQgYnkgY2hhbXBpb25zd2ltbWVyIG9uIDIyLzA3LzE3Lg0KICovCgp2YXIgTW9ja1N0b3JhZ2U7IC8vIEB0cy1pZ25vcmUKCnsKICBNb2NrU3RvcmFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBNb2NrU3RvcmFnZSgpIHsKICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vY2tTdG9yYWdlKTsKICAgIH0KCiAgICBfY3JlYXRlQ2xhc3MoTW9ja1N0b3JhZ2UsIFt7CiAgICAgIGtleTogImtleSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBrZXkoaW5kZXgpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcylbaW5kZXhdOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNldEl0ZW0iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXRlbShrZXksIGRhdGEpIHsKICAgICAgICB0aGlzW2tleV0gPSBkYXRhLnRvU3RyaW5nKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZ2V0SXRlbSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJdGVtKGtleSkgewogICAgICAgIHJldHVybiB0aGlzW2tleV07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicmVtb3ZlSXRlbSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJdGVtKGtleSkgewogICAgICAgIGRlbGV0ZSB0aGlzW2tleV07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY2xlYXIiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTsgX2kgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICB2YXIga2V5ID0gX09iamVjdCRrZXlzW19pXTsKICAgICAgICAgIGRlbGV0ZSB0aGlzW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImxlbmd0aCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5sZW5ndGg7CiAgICAgIH0KICAgIH1dKTsKCiAgICByZXR1cm4gTW9ja1N0b3JhZ2U7CiAgfSgpOwp9IC8vIHRzbGludDpkaXNhYmxlOiB2YXJpYWJsZS1uYW1lCgp2YXIgU2ltcGxlUHJvbWlzZVF1ZXVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTaW1wbGVQcm9taXNlUXVldWUoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2ltcGxlUHJvbWlzZVF1ZXVlKTsKCiAgICB0aGlzLl9xdWV1ZSA9IFtdOwogICAgdGhpcy5fZmx1c2hpbmcgPSBmYWxzZTsKICB9CgogIF9jcmVhdGVDbGFzcyhTaW1wbGVQcm9taXNlUXVldWUsIFt7CiAgICBrZXk6ICJlbnF1ZXVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlbnF1ZXVlKHByb21pc2UpIHsKICAgICAgdGhpcy5fcXVldWUucHVzaChwcm9taXNlKTsKCiAgICAgIGlmICghdGhpcy5fZmx1c2hpbmcpIHsKICAgICAgICByZXR1cm4gdGhpcy5mbHVzaFF1ZXVlKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmbHVzaFF1ZXVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmbHVzaFF1ZXVlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5fZmx1c2hpbmcgPSB0cnVlOwoKICAgICAgdmFyIGNoYWluID0gZnVuY3Rpb24gY2hhaW4oKSB7CiAgICAgICAgdmFyIG5leHRUYXNrID0gX3RoaXMuX3F1ZXVlLnNoaWZ0KCk7CgogICAgICAgIGlmIChuZXh0VGFzaykgewogICAgICAgICAgcmV0dXJuIG5leHRUYXNrLnRoZW4oY2hhaW4pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpcy5fZmx1c2hpbmcgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH07CgogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYWluKCkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNpbXBsZVByb21pc2VRdWV1ZTsKfSgpOwoKZnVuY3Rpb24gbWVyZ2UoaW50bywgZnJvbSkgewogIHJldHVybiBsb2Rhc2hNZXJnZSh7fSwgaW50bywgZnJvbSk7Cn0KCnZhciBGbGF0dGVkSlNPTiA9IEpTT047Ci8qKg0KICogQSBjbGFzcyB0aGF0IGltcGxlbWVudHMgdGhlIHZ1ZXggcGVyc2lzdGVuY2UuDQogKiBAdHlwZSBTIHR5cGUgb2YgdGhlICdzdGF0ZScgaW5zaWRlIHRoZSBzdG9yZSAoZGVmYXVsdDogYW55KQ0KICovCgp2YXIgVnVleFBlcnNpc3RlbmNlID0KLyoqDQogKiBDcmVhdGUgYSB7QGxpbmsgVnVleFBlcnNpc3RlbmNlfSBvYmplY3QuDQogKiBVc2UgdGhlIDxjb2RlPnBsdWdpbjwvY29kZT4gZnVuY3Rpb24gb2YgdGhpcyBjbGFzcyBhcyBhDQogKiBWdWV4IHBsdWdpbi4NCiAqIEBwYXJhbSB7UGVyc2lzdE9wdGlvbnN9IG9wdGlvbnMNCiAqLwpmdW5jdGlvbiBWdWV4UGVyc2lzdGVuY2Uob3B0aW9ucykgewogIHZhciBfdGhpczIgPSB0aGlzOwoKICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVnVleFBlcnNpc3RlbmNlKTsKCiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWUKICB0aGlzLl9tdXRleCA9IG5ldyBTaW1wbGVQcm9taXNlUXVldWUoKTsKICAvKioNCiAgICogQ3JlYXRlcyBhIHN1YnNjcmliZXIgb24gdGhlIHN0b3JlLiBhdXRvbWF0aWNhbGx5IGlzIHVzZWQNCiAgICogd2hlbiB0aGlzIGlzIHVzZWQgYSB2dWV4IHBsdWdpbi4gTm90IGZvciBtYW51YWwgdXNhZ2UuDQogICAqIEBwYXJhbSBzdG9yZQ0KICAgKi8KCiAgdGhpcy5zdWJzY3JpYmVyID0gZnVuY3Rpb24gKHN0b3JlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsKICAgICAgcmV0dXJuIHN0b3JlLnN1YnNjcmliZShoYW5kbGVyKTsKICAgIH07CiAgfTsKCiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAndW5kZWZpbmVkJykgb3B0aW9ucyA9IHt9OwogIHRoaXMua2V5ID0gb3B0aW9ucy5rZXkgIT0gbnVsbCA/IG9wdGlvbnMua2V5IDogJ3Z1ZXgnOwogIHRoaXMuc3Vic2NyaWJlZCA9IGZhbHNlOwogIHRoaXMuc3VwcG9ydENpcmN1bGFyID0gb3B0aW9ucy5zdXBwb3J0Q2lyY3VsYXIgfHwgZmFsc2U7CgogIGlmICh0aGlzLnN1cHBvcnRDaXJjdWxhcikgewogICAgRmxhdHRlZEpTT04gPSByZXF1aXJlKCdmbGF0dGVkJyk7CiAgfSAvLyBAdHMtaWdub3JlCgoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgewogICAgdGhpcy5zdG9yYWdlID0gb3B0aW9ucy5zdG9yYWdlIHx8IHdpbmRvdy5sb2NhbFN0b3JhZ2U7CiAgfSBlbHNlIHsKICAgIC8vIEB0cy1pZ25vcmUKICAgIHsKICAgICAgdGhpcy5zdG9yYWdlID0gb3B0aW9ucy5zdG9yYWdlIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5sb2NhbFN0b3JhZ2UgOiBuZXcgTW9ja1N0b3JhZ2UoKSk7CiAgICB9CiAgfQogIC8qKg0KICAgKiBIb3cgdGhpcyB3b3JrcyBpcyAtDQogICAqICAxLiBJZiB0aGVyZSBpcyBvcHRpb25zLnJlZHVjZXIgZnVuY3Rpb24sIHdlIHVzZSB0aGF0LCBpZiBub3Q7DQogICAqICAyLiBXZSBjaGVjayBvcHRpb25zLm1vZHVsZXM7DQogICAqICAgIDEuIElmIHRoZXJlIGlzIG5vIG9wdGlvbnMubW9kdWxlcyBhcnJheSwgd2UgdXNlIGVudGlyZSBzdGF0ZSBpbiByZWR1Y2VyDQogICAqICAgIDIuIE90aGVyd2lzZSwgd2UgY3JlYXRlIGEgcmVkdWNlciB0aGF0IG1lcmdlcyBhbGwgdGhvc2Ugc3RhdGUgbW9kdWxlcyB0aGF0IGFyZQ0KICAgKiAgICAgICAgZGVmaW5lZCBpbiB0aGUgb3B0aW9ucy5tb2R1bGVzW10gYXJyYXkNCiAgICogQHR5cGUgeygoc3RhdGU6IFMpID0+IHt9KSB8ICgoc3RhdGU6IFMpID0+IFMpIHwgKChzdGF0ZTogYW55KSA9PiB7fSl9DQogICAqLwoKCiAgdGhpcy5yZWR1Y2VyID0gb3B0aW9ucy5yZWR1Y2VyICE9IG51bGwgPyBvcHRpb25zLnJlZHVjZXIgOiBvcHRpb25zLm1vZHVsZXMgPT0gbnVsbCA/IGZ1bmN0aW9uIChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlOwogIH0gOiBmdW5jdGlvbiAoc3RhdGUpIHsKICAgIHJldHVybiBvcHRpb25zLm1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChhLCBpKSB7CiAgICAgIHJldHVybiBtZXJnZShhLCBfZGVmaW5lUHJvcGVydHkoe30sIGksIHN0YXRlW2ldKSk7CiAgICB9LCB7CiAgICAgIC8qIHN0YXJ0IGVtcHR5IGFjY3VtdWxhdG9yKi8KICAgIH0pOwogIH07CgogIHRoaXMuZmlsdGVyID0gb3B0aW9ucy5maWx0ZXIgfHwgZnVuY3Rpb24gKG11dGF0aW9uKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICB0aGlzLnN0cmljdE1vZGUgPSBvcHRpb25zLnN0cmljdE1vZGUgfHwgZmFsc2U7CgogIHRoaXMuUkVTVE9SRV9NVVRBVElPTiA9IGZ1bmN0aW9uIFJFU1RPUkVfTVVUQVRJT04oc3RhdGUsIHNhdmVkU3RhdGUpIHsKICAgIHZhciBtZXJnZWRTdGF0ZSA9IG1lcmdlKHN0YXRlLCBzYXZlZFN0YXRlIHx8IHt9KTsKCiAgICBmb3IgKHZhciBfaTIgPSAwLCBfT2JqZWN0JGtleXMyID0gT2JqZWN0LmtleXMobWVyZ2VkU3RhdGUpOyBfaTIgPCBfT2JqZWN0JGtleXMyLmxlbmd0aDsgX2kyKyspIHsKICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IF9PYmplY3Qka2V5czJbX2kyXTsKCiAgICAgIHRoaXMuX3ZtLiRzZXQoc3RhdGUsIHByb3BlcnR5TmFtZSwgbWVyZ2VkU3RhdGVbcHJvcGVydHlOYW1lXSk7CiAgICB9CiAgfTsKCiAgdGhpcy5hc3luY1N0b3JhZ2UgPSBvcHRpb25zLmFzeW5jU3RvcmFnZSB8fCBmYWxzZTsKCiAgaWYgKHRoaXMuYXN5bmNTdG9yYWdlKSB7CiAgICAvKioNCiAgICAgKiBBc3luYyB7QGxpbmsgI1Z1ZXhQZXJzaXN0ZW5jZS5yZXN0b3JlU3RhdGV9IGltcGxlbWVudGF0aW9uDQogICAgICogQHR5cGUgeygoa2V5OiBzdHJpbmcsIHN0b3JhZ2U/OiBTdG9yYWdlKSA9Pg0KICAgICAqICAgICAgKFByb21pc2U8Uz4gfCBTKSkgfCAoKGtleTogc3RyaW5nLCBzdG9yYWdlOiBBc3luY1N0b3JhZ2UpID0+IFByb21pc2U8YW55Pil9DQogICAgICovCiAgICB0aGlzLnJlc3RvcmVTdGF0ZSA9IG9wdGlvbnMucmVzdG9yZVN0YXRlICE9IG51bGwgPyBvcHRpb25zLnJlc3RvcmVTdGF0ZSA6IGZ1bmN0aW9uIChrZXksIHN0b3JhZ2UpIHsKICAgICAgcmV0dXJuIHN0b3JhZ2UuZ2V0SXRlbShrZXkpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgLy8gSWYgc3RyaW5nLCBwYXJzZSwgb3IgZWxzZSwganVzdCByZXR1cm4KICAgICAgICA/IF90aGlzMi5zdXBwb3J0Q2lyY3VsYXIgPyBGbGF0dGVkSlNPTi5wYXJzZSh2YWx1ZSB8fCAne30nKSA6IEpTT04ucGFyc2UodmFsdWUgfHwgJ3t9JykgOiB2YWx1ZSB8fCB7fTsKICAgICAgfSk7CiAgICB9OwogICAgLyoqDQogICAgICogQXN5bmMge0BsaW5rICNWdWV4UGVyc2lzdGVuY2Uuc2F2ZVN0YXRlfSBpbXBsZW1lbnRhdGlvbg0KICAgICAqIEB0eXBlIHsoKGtleTogc3RyaW5nLCBzdGF0ZToge30sIHN0b3JhZ2U/OiBTdG9yYWdlKSA9Pg0KICAgICAqICAgIChQcm9taXNlPHZvaWQ+IHwgdm9pZCkpIHwgKChrZXk6IHN0cmluZywgc3RhdGU6IHt9LCBzdG9yYWdlPzogU3RvcmFnZSkgPT4gUHJvbWlzZTx2b2lkPil9DQogICAgICovCgogICAgdGhpcy5zYXZlU3RhdGUgPSBvcHRpb25zLnNhdmVTdGF0ZSAhPSBudWxsID8gb3B0aW9ucy5zYXZlU3RhdGUgOiBmdW5jdGlvbiAoa2V5LCBzdGF0ZSwgc3RvcmFnZSkgewogICAgICByZXR1cm4gc3RvcmFnZS5zZXRJdGVtKGtleSwgLy8gU2Vjb25kIGFyZ3VtZW50IGlzIHN0YXRlIF9vYmplY3RfIGlmIGFzeWMgc3RvcmFnZSwgc3RyaW5naWZpZWQgb3RoZXJ3aXNlCiAgICAgIC8vIGRvIG5vdCBzdHJpbmdpZnkgdGhlIHN0YXRlIGlmIHRoZSBzdG9yYWdlIHR5cGUgaXMgYXN5bmMKICAgICAgX3RoaXMyLmFzeW5jU3RvcmFnZSA/IG1lcmdlKHt9LCBzdGF0ZSB8fCB7fSkgOiBfdGhpczIuc3VwcG9ydENpcmN1bGFyID8gRmxhdHRlZEpTT04uc3RyaW5naWZ5KHN0YXRlKSA6IEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7CiAgICB9OwogICAgLyoqDQogICAgICogQXN5bmMgdmVyc2lvbiBvZiBwbHVnaW4NCiAgICAgKiBAcGFyYW0ge1N0b3JlPFM+fSBzdG9yZQ0KICAgICAqLwoKICAgIHRoaXMucGx1Z2luID0gZnVuY3Rpb24gKHN0b3JlKSB7CiAgICAgIC8qKg0KICAgICAgICogRm9yIGFzeW5jIHN0b3Jlcywgd2UncmUgY2FwdHVyaW5nIHRoZSBQcm9taXNlIHJldHVybmVkDQogICAgICAgKiBieSB0aGUgYHJlc3RvcmVTdGF0ZSgpYCBmdW5jdGlvbiBpbiBhIGByZXN0b3JlZGAgcHJvcGVydHkNCiAgICAgICAqIG9uIHRoZSBzdG9yZSBpdHNlbGYuIFRoaXMgd291bGQgYWxsb3cgYXBwIGRldmVsb3BlcnMgdG8NCiAgICAgICAqIGRldGVybWluZSB3aGVuIGFuZCBpZiB0aGUgc3RvcmUncyBzdGF0ZSBoYXMgaW5kZWVkIGJlZW4NCiAgICAgICAqIHJlZnJlc2hlZC4gVGhpcyBhcHByb2FjaCB3YXMgc3VnZ2VzdGVkIGJ5IEdpdEh1YiB1c2VyIEBob3Rkb2dlZS4NCiAgICAgICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhbXBpb25zd2ltbWVyL3Z1ZXgtcGVyc2lzdC9wdWxsLzExOCNpc3N1ZWNvbW1lbnQtNTAwOTE0OTYzDQogICAgICAgKiBAc2luY2UgMi4xLjANCiAgICAgICAqLwogICAgICBzdG9yZS5yZXN0b3JlZCA9IF90aGlzMi5yZXN0b3JlU3RhdGUoX3RoaXMyLmtleSwgX3RoaXMyLnN0b3JhZ2UpLnRoZW4oZnVuY3Rpb24gKHNhdmVkU3RhdGUpIHsKICAgICAgICAvKioNCiAgICAgICAgICogSWYgaW4gc3RyaWN0IG1vZGUsIGRvIG9ubHkgdmlhIG11dGF0aW9uDQogICAgICAgICAqLwogICAgICAgIGlmIChfdGhpczIuc3RyaWN0TW9kZSkgewogICAgICAgICAgc3RvcmUuY29tbWl0KCdSRVNUT1JFX01VVEFUSU9OJywgc2F2ZWRTdGF0ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0b3JlLnJlcGxhY2VTdGF0ZShtZXJnZShzdG9yZS5zdGF0ZSwgc2F2ZWRTdGF0ZSB8fCB7fSkpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMyLnN1YnNjcmliZXIoc3RvcmUpKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHsKICAgICAgICAgIGlmIChfdGhpczIuZmlsdGVyKG11dGF0aW9uKSkgewogICAgICAgICAgICBfdGhpczIuX211dGV4LmVucXVldWUoX3RoaXMyLnNhdmVTdGF0ZShfdGhpczIua2V5LCBfdGhpczIucmVkdWNlcihzdGF0ZSksIF90aGlzMi5zdG9yYWdlKSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMi5zdWJzY3JpYmVkID0gdHJ1ZTsKICAgICAgfSk7CiAgICB9OwogIH0gZWxzZSB7CiAgICAvKioNCiAgICAgKiBTeW5jIHtAbGluayAjVnVleFBlcnNpc3RlbmNlLnJlc3RvcmVTdGF0ZX0gaW1wbGVtZW50YXRpb24NCiAgICAgKiBAdHlwZSB7KChrZXk6IHN0cmluZywgc3RvcmFnZT86IFN0b3JhZ2UpID0+DQogICAgICogICAgKFByb21pc2U8Uz4gfCBTKSkgfCAoKGtleTogc3RyaW5nLCBzdG9yYWdlOiBTdG9yYWdlKSA9PiAoYW55IHwgc3RyaW5nIHwge30pKX0NCiAgICAgKi8KICAgIHRoaXMucmVzdG9yZVN0YXRlID0gb3B0aW9ucy5yZXN0b3JlU3RhdGUgIT0gbnVsbCA/IG9wdGlvbnMucmVzdG9yZVN0YXRlIDogZnVuY3Rpb24gKGtleSwgc3RvcmFnZSkgewogICAgICB2YXIgdmFsdWUgPSBzdG9yYWdlLmdldEl0ZW0oa2V5KTsKCiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgLy8gSWYgc3RyaW5nLCBwYXJzZSwgb3IgZWxzZSwganVzdCByZXR1cm4KICAgICAgICByZXR1cm4gX3RoaXMyLnN1cHBvcnRDaXJjdWxhciA/IEZsYXR0ZWRKU09OLnBhcnNlKHZhbHVlIHx8ICd7fScpIDogSlNPTi5wYXJzZSh2YWx1ZSB8fCAne30nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdmFsdWUgfHwge307CiAgICAgIH0KICAgIH07CiAgICAvKioNCiAgICAgKiBTeW5jIHtAbGluayAjVnVleFBlcnNpc3RlbmNlLnNhdmVTdGF0ZX0gaW1wbGVtZW50YXRpb24NCiAgICAgKiBAdHlwZSB7KChrZXk6IHN0cmluZywgc3RhdGU6IHt9LCBzdG9yYWdlPzogU3RvcmFnZSkgPT4NCiAgICAgKiAgICAgKFByb21pc2U8dm9pZD4gfCB2b2lkKSkgfCAoKGtleTogc3RyaW5nLCBzdGF0ZToge30sIHN0b3JhZ2U/OiBTdG9yYWdlKSA9PiBQcm9taXNlPHZvaWQ+KX0NCiAgICAgKi8KCiAgICB0aGlzLnNhdmVTdGF0ZSA9IG9wdGlvbnMuc2F2ZVN0YXRlICE9IG51bGwgPyBvcHRpb25zLnNhdmVTdGF0ZSA6IGZ1bmN0aW9uIChrZXksIHN0YXRlLCBzdG9yYWdlKSB7CiAgICAgIHJldHVybiBzdG9yYWdlLnNldEl0ZW0oa2V5LCAvLyBTZWNvbmQgYXJndW1lbnQgaXMgc3RhdGUgX29iamVjdF8gaWYgbG9jYWxmb3JhZ2UsIHN0cmluZ2lmaWVkIG90aGVyd2lzZQogICAgICBfdGhpczIuc3VwcG9ydENpcmN1bGFyID8gRmxhdHRlZEpTT04uc3RyaW5naWZ5KHN0YXRlKSA6IEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7CiAgICB9OwogICAgLyoqDQogICAgICogU3luYyB2ZXJzaW9uIG9mIHBsdWdpbg0KICAgICAqIEBwYXJhbSB7U3RvcmU8Uz59IHN0b3JlDQogICAgICovCgogICAgdGhpcy5wbHVnaW4gPSBmdW5jdGlvbiAoc3RvcmUpIHsKICAgICAgdmFyIHNhdmVkU3RhdGUgPSBfdGhpczIucmVzdG9yZVN0YXRlKF90aGlzMi5rZXksIF90aGlzMi5zdG9yYWdlKTsKCiAgICAgIGlmIChfdGhpczIuc3RyaWN0TW9kZSkgewogICAgICAgIHN0b3JlLmNvbW1pdCgnUkVTVE9SRV9NVVRBVElPTicsIHNhdmVkU3RhdGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHN0b3JlLnJlcGxhY2VTdGF0ZShtZXJnZShzdG9yZS5zdGF0ZSwgc2F2ZWRTdGF0ZSB8fCB7fSkpOwogICAgICB9CgogICAgICBfdGhpczIuc3Vic2NyaWJlcihzdG9yZSkoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkgewogICAgICAgIGlmIChfdGhpczIuZmlsdGVyKG11dGF0aW9uKSkgewogICAgICAgICAgX3RoaXMyLnNhdmVTdGF0ZShfdGhpczIua2V5LCBfdGhpczIucmVkdWNlcihzdGF0ZSksIF90aGlzMi5zdG9yYWdlKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgX3RoaXMyLnN1YnNjcmliZWQgPSB0cnVlOwogICAgfTsKICB9Cn07CgpleHBvcnQgZGVmYXVsdCBWdWV4UGVyc2lzdGVuY2U7CmV4cG9ydCB7IE1vY2tTdG9yYWdlLCBWdWV4UGVyc2lzdGVuY2UgfTs="},{"version":3,"sources":["../../src/MockStorage.ts","../../src/SimplePromiseQueue.ts","../../src/utils.ts","../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by championswimmer on 22/07/17.\n */\nlet MockStorage: typeof Storage | undefined\n\n// @ts-ignore\nif (process.env.MODULE_FORMAT !== 'umd') {\n  MockStorage = class implements Storage {\n    [index: number]: string;\n    [key: string]: any;\n\n    public get length(): number {\n      return Object.keys(this).length\n    }\n\n    public key(index: number): string | any {\n      return Object.keys(this)[index]\n    }\n\n    public setItem(key: string, data: any): void {\n      this[key] = data.toString()\n    }\n    public getItem(key: string): string {\n      return this[key]\n    }\n    public removeItem(key: string): void {\n      delete this[key]\n    }\n    public clear(): void {\n      for (const key of Object.keys(this)) {\n        delete this[key]\n      }\n    }\n  }\n}\n\nexport { MockStorage }\n","// tslint:disable: variable-name\nexport default class SimplePromiseQueue {\n  private readonly _queue: Array<Promise<void>> = []\n  private _flushing = false\n\n  public enqueue(promise: Promise<void>) {\n    this._queue.push(promise)\n    if (!this._flushing) { return this.flushQueue() }\n    return Promise.resolve()\n  }\n\n  private flushQueue() {\n    this._flushing = true\n\n    const chain = (): Promise<void> | void => {\n      const nextTask = this._queue.shift()\n      if (nextTask) {\n        return nextTask.then(chain)\n      } else {\n        this._flushing = false\n      }\n    }\n    return Promise.resolve(chain())\n  }\n}\n","import lodashMerge from 'lodash.merge'\n\nexport function merge(into: any, from: any) {\n  return lodashMerge({}, into, from)\n}\n","/**\n * Created by championswimmer on 18/07/17.\n */\nimport {Mutation, MutationPayload, Payload, Plugin, Store} from 'vuex'\nimport {AsyncStorage} from './AsyncStorage'\nimport { MockStorage } from './MockStorage'\nimport {PersistOptions} from './PersistOptions'\nimport SimplePromiseQueue from './SimplePromiseQueue'\nimport {merge} from './utils'\n\nlet FlattedJSON = JSON\n\n/**\n * A class that implements the vuex persistence.\n * @type S type of the 'state' inside the store (default: any)\n */\nexport class VuexPersistence<S> implements PersistOptions<S> {\n  public asyncStorage: boolean\n  public storage: Storage | AsyncStorage\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\n  public reducer: (state: S) => Partial<S>\n  public key: string\n  public filter: (mutation: Payload) => boolean\n  public modules: string[]\n  public strictMode: boolean\n  public supportCircular: boolean\n\n  /**\n   * The plugin function that can be used inside a vuex store.\n   */\n  public plugin: Plugin<S>\n  /**\n   * A mutation that can be used to restore state\n   * Helpful if we are running in strict mode\n   */\n  public RESTORE_MUTATION: Mutation<S>\n  public subscribed: boolean\n\n  // tslint:disable-next-line:variable-name\n  private _mutex = new SimplePromiseQueue()\n\n  /**\n   * Create a {@link VuexPersistence} object.\n   * Use the <code>plugin</code> function of this class as a\n   * Vuex plugin.\n   * @param {PersistOptions} options\n   */\n  public constructor(options?: PersistOptions<S>) {\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\n    this.key = ((options.key != null) ? options.key : 'vuex')\n\n    this.subscribed = false\n    this.supportCircular = options.supportCircular || false\n    if (this.supportCircular) {\n      FlattedJSON = require('flatted')\n    }\n\n    // @ts-ignore\n    if (process.env.NODE_ENV === 'production') {\n      this.storage = options.storage ||  window.localStorage\n    } else {\n      // @ts-ignore\n      if (process.env.MODULE_FORMAT !== 'umd') {\n        this.storage = options.storage || (typeof window !== 'undefined' ? window.localStorage : new MockStorage!())\n      } else {\n        // If UMD module, then we will only be having localStorage\n        this.storage = options.storage || window.localStorage\n      }\n    }\n\n    /**\n     * How this works is -\n     *  1. If there is options.reducer function, we use that, if not;\n     *  2. We check options.modules;\n     *    1. If there is no options.modules array, we use entire state in reducer\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\n     *        defined in the options.modules[] array\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\n     */\n    this.reducer = (\n      (options.reducer != null)\n        ? options.reducer\n        : (\n          (options.modules == null)\n            ? ((state: S) => state)\n            : (\n              (state: any) =>\n                (options!.modules as string[]).reduce((a, i) =>\n                  merge(a, {[i]: state[i]}), {/* start empty accumulator*/})\n            )\n        )\n    )\n\n    this.filter = options.filter || ((mutation) => true)\n\n    this.strictMode = options.strictMode || false\n\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\n      const mergedState = merge(state, savedState || {})\n      for (const propertyName of Object.keys(mergedState)) {\n        (this as any)._vm.$set(state, propertyName, mergedState[propertyName])\n      }\n    }\n\n    this.asyncStorage = options.asyncStorage || false\n\n    if (this.asyncStorage) {\n\n      /**\n       * Async {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: AsyncStorage) =>\n              (storage).getItem(key)\n                .then((value) =>\n                  typeof value === 'string' // If string, parse, or else, just return\n                    ? (\n                      this.supportCircular\n                        ? FlattedJSON.parse(value || '{}')\n                        : JSON.parse(value || '{}')\n                    )\n                    : (value || {})\n                )\n          )\n      )\n\n      /**\n       * Async {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: AsyncStorage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if asyc storage, stringified otherwise\n                // do not stringify the state if the storage type is async\n                (this.asyncStorage\n                    ? merge({}, state || {})\n                    : (\n                      this.supportCircular\n                        ? FlattedJSON.stringify(state) as any\n                        : JSON.stringify(state) as any\n                    )\n                )\n              )\n          )\n      )\n\n      /**\n       * Async version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        /**\n         * For async stores, we're capturing the Promise returned\n         * by the `restoreState()` function in a `restored` property\n         * on the store itself. This would allow app developers to\n         * determine when and if the store's state has indeed been\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\n         * @since 2.1.0\n         */\n        (store as any).restored = ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\n          /**\n           * If in strict mode, do only via mutation\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState)\n          } else {\n            store.replaceState(merge(store.state, savedState || {}))\n          }\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\n              )\n            }\n          })\n          this.subscribed = true\n        })\n      }\n    } else {\n\n      /**\n       * Sync {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: Storage) => {\n            const value = (storage).getItem(key)\n            if (typeof value === 'string') {// If string, parse, or else, just return\n              return (\n                this.supportCircular\n                  ? FlattedJSON.parse(value || '{}')\n                  : JSON.parse(value || '{}')\n              )\n            } else {\n              return (value || {})\n            }\n          })\n      )\n\n      /**\n       * Sync {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: Storage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (\n                  this.supportCircular\n                    ? FlattedJSON.stringify(state) as any\n                    : JSON.stringify(state) as any\n                )\n              )\n          )\n      )\n\n      /**\n       * Sync version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        const savedState = this.restoreState(this.key, this.storage) as S\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState)\n        } else {\n          store.replaceState(merge(store.state, savedState || {}))\n        }\n\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage)\n          }\n        })\n\n        this.subscribed = true\n      }\n    }\n  }\n\n  /**\n   * Creates a subscriber on the store. automatically is used\n   * when this is used a vuex plugin. Not for manual usage.\n   * @param store\n   */\n  private subscriber = (store: Store<S>) =>\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\n}\n\nexport {\n  MockStorage, AsyncStorage, PersistOptions\n}\n\nexport default VuexPersistence\n"]}]}